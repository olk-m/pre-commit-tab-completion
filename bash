# AUTOMATICALLY GENERATED by `shtab`

_shtab_pre_commit_subparsers=('autoupdate' 'clean' 'gc' 'init-templatedir' 'install' 'install-hooks' 'migrate-config' 'run' 'sample-config' 'try-repo' 'uninstall' 'validate-config' 'validate-manifest' 'help')

_shtab_pre_commit_option_strings=('-h' '--help' '-s' '--print-completion' '-V' '--version')
_shtab_pre_commit_autoupdate_option_strings=('-h' '--help' '--color' '-c' '--config' '--bleeding-edge' '--freeze' '--repo' '-j' '--jobs')
_shtab_pre_commit_clean_option_strings=('-h' '--help' '--color')
_shtab_pre_commit_gc_option_strings=('-h' '--help' '--color')
_shtab_pre_commit_init_templatedir_option_strings=('-h' '--help' '--color' '-c' '--config' '--no-allow-missing-config' '-t' '--hook-type')
_shtab_pre_commit_install_option_strings=('-h' '--help' '--color' '-c' '--config' '-f' '--overwrite' '--install-hooks' '-t' '--hook-type' '--allow-missing-config')
_shtab_pre_commit_install_hooks_option_strings=('-h' '--help' '--color' '-c' '--config')
_shtab_pre_commit_migrate_config_option_strings=('-h' '--help' '--color' '-c' '--config')
_shtab_pre_commit_run_option_strings=('-h' '--help' '--color' '-c' '--config' '--verbose' '-v' '--all-files' '-a' '--files' '--show-diff-on-failure' '--hook-stage' '--remote-branch' '--local-branch' '--from-ref' '--source' '-s' '--to-ref' '--origin' '-o' '--pre-rebase-upstream' '--pre-rebase-branch' '--commit-msg-filename' '--prepare-commit-message-source' '--commit-object-name' '--remote-name' '--remote-url' '--checkout-type' '--is-squash-merge' '--rewrite-command')
_shtab_pre_commit_sample_config_option_strings=('-h' '--help' '--color')
_shtab_pre_commit_try_repo_option_strings=('-h' '--help' '--color' '-c' '--config' '--ref' '--rev' '--verbose' '-v' '--all-files' '-a' '--files' '--show-diff-on-failure' '--hook-stage' '--remote-branch' '--local-branch' '--from-ref' '--source' '-s' '--to-ref' '--origin' '-o' '--pre-rebase-upstream' '--pre-rebase-branch' '--commit-msg-filename' '--prepare-commit-message-source' '--commit-object-name' '--remote-name' '--remote-url' '--checkout-type' '--is-squash-merge' '--rewrite-command')
_shtab_pre_commit_uninstall_option_strings=('-h' '--help' '--color' '-c' '--config' '-t' '--hook-type')
_shtab_pre_commit_validate_config_option_strings=('-h' '--help' '--color')
_shtab_pre_commit_validate_manifest_option_strings=('-h' '--help' '--color')
_shtab_pre_commit_help_option_strings=('-h' '--help')



_shtab_pre_commit_pos_0_choices=('autoupdate' 'clean' 'gc' 'init-templatedir' 'install' 'install-hooks' 'migrate-config' 'run' 'sample-config' 'try-repo' 'uninstall' 'validate-config' 'validate-manifest' 'help')
_shtab_pre_commit__s_choices=('bash' 'zsh' 'tcsh')
_shtab_pre_commit___print_completion_choices=('bash' 'zsh' 'tcsh')
_shtab_pre_commit_init_templatedir__t_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')
_shtab_pre_commit_init_templatedir___hook_type_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')
_shtab_pre_commit_install__t_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')
_shtab_pre_commit_install___hook_type_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')
_shtab_pre_commit_run___hook_stage_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg' 'manual')
_shtab_pre_commit_try_repo___hook_stage_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg' 'manual')
_shtab_pre_commit_uninstall__t_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')
_shtab_pre_commit_uninstall___hook_type_choices=('commit-msg' 'post-checkout' 'post-commit' 'post-merge' 'post-rewrite' 'pre-commit' 'pre-merge-commit' 'pre-push' 'pre-rebase' 'prepare-commit-msg')

_shtab_pre_commit_pos_0_nargs=A...
_shtab_pre_commit__h_nargs=0
_shtab_pre_commit___help_nargs=0
_shtab_pre_commit__V_nargs=0
_shtab_pre_commit___version_nargs=0
_shtab_pre_commit_autoupdate__h_nargs=0
_shtab_pre_commit_autoupdate___help_nargs=0
_shtab_pre_commit_autoupdate___bleeding_edge_nargs=0
_shtab_pre_commit_autoupdate___freeze_nargs=0
_shtab_pre_commit_clean__h_nargs=0
_shtab_pre_commit_clean___help_nargs=0
_shtab_pre_commit_gc__h_nargs=0
_shtab_pre_commit_gc___help_nargs=0
_shtab_pre_commit_init_templatedir__h_nargs=0
_shtab_pre_commit_init_templatedir___help_nargs=0
_shtab_pre_commit_init_templatedir___no_allow_missing_config_nargs=0
_shtab_pre_commit_install__h_nargs=0
_shtab_pre_commit_install___help_nargs=0
_shtab_pre_commit_install__f_nargs=0
_shtab_pre_commit_install___overwrite_nargs=0
_shtab_pre_commit_install___install_hooks_nargs=0
_shtab_pre_commit_install___allow_missing_config_nargs=0
_shtab_pre_commit_install_hooks__h_nargs=0
_shtab_pre_commit_install_hooks___help_nargs=0
_shtab_pre_commit_migrate_config__h_nargs=0
_shtab_pre_commit_migrate_config___help_nargs=0
_shtab_pre_commit_run__h_nargs=0
_shtab_pre_commit_run___help_nargs=0
_shtab_pre_commit_run___verbose_nargs=0
_shtab_pre_commit_run__v_nargs=0
_shtab_pre_commit_run___all_files_nargs=0
_shtab_pre_commit_run__a_nargs=0
_shtab_pre_commit_run___files_nargs=*
_shtab_pre_commit_run___show_diff_on_failure_nargs=0
_shtab_pre_commit_sample_config__h_nargs=0
_shtab_pre_commit_sample_config___help_nargs=0
_shtab_pre_commit_try_repo__h_nargs=0
_shtab_pre_commit_try_repo___help_nargs=0
_shtab_pre_commit_try_repo___verbose_nargs=0
_shtab_pre_commit_try_repo__v_nargs=0
_shtab_pre_commit_try_repo___all_files_nargs=0
_shtab_pre_commit_try_repo__a_nargs=0
_shtab_pre_commit_try_repo___files_nargs=*
_shtab_pre_commit_try_repo___show_diff_on_failure_nargs=0
_shtab_pre_commit_uninstall__h_nargs=0
_shtab_pre_commit_uninstall___help_nargs=0
_shtab_pre_commit_validate_config_pos_0_nargs=*
_shtab_pre_commit_validate_config__h_nargs=0
_shtab_pre_commit_validate_config___help_nargs=0
_shtab_pre_commit_validate_manifest_pos_0_nargs=*
_shtab_pre_commit_validate_manifest__h_nargs=0
_shtab_pre_commit_validate_manifest___help_nargs=0
_shtab_pre_commit_help__h_nargs=0
_shtab_pre_commit_help___help_nargs=0


# $1=COMP_WORDS[1]
_shtab_compgen_files() {
  compgen -f -- $1  # files
}

# $1=COMP_WORDS[1]
_shtab_compgen_dirs() {
  compgen -d -- $1  # recurse into subdirs
}

# $1=COMP_WORDS[1]
_shtab_replace_nonword() {
  echo "${1//[^[:word:]]/_}"
}

# set default values (called for the initial parser & any subparsers)
_set_parser_defaults() {
  local subparsers_var="${prefix}_subparsers[@]"
  sub_parsers=${!subparsers_var-}

  local current_option_strings_var="${prefix}_option_strings[@]"
  current_option_strings=${!current_option_strings_var}

  completed_positional_actions=0

  _set_new_action "pos_${completed_positional_actions}" true
}

# $1=action identifier
# $2=positional action (bool)
# set all identifiers for an action's parameters
_set_new_action() {
  current_action="${prefix}_$(_shtab_replace_nonword $1)"

  local current_action_compgen_var=${current_action}_COMPGEN
  current_action_compgen="${!current_action_compgen_var-}"

  local current_action_choices_var="${current_action}_choices[@]"
  current_action_choices="${!current_action_choices_var-}"

  local current_action_nargs_var="${current_action}_nargs"
  if [ -n "${!current_action_nargs_var-}" ]; then
    current_action_nargs="${!current_action_nargs_var}"
  else
    current_action_nargs=1
  fi

  current_action_args_start_index=$(( $word_index + 1 ))

  current_action_is_positional=$2
}

# Notes:
# `COMPREPLY`: what will be rendered after completion is triggered
# `completing_word`: currently typed word to generate completions for
# `${!var}`: evaluates the content of `var` and expand its content as a variable
#     hello="world"
#     x="hello"
#     ${!x} -> ${hello} -> "world"
_shtab_pre_commit() {
  local completing_word="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=()

  local prefix=_shtab_pre_commit
  local word_index=0
  _set_parser_defaults
  word_index=1

  # determine what arguments are appropriate for the current state
  # of the arg parser
  while [ $word_index -ne $COMP_CWORD ]; do
    local this_word="${COMP_WORDS[$word_index]}"

    if [[ -n $sub_parsers && " ${sub_parsers[@]} " == *" ${this_word} "* ]]; then
      # valid subcommand: add it to the prefix & reset the current action
      prefix="${prefix}_$(_shtab_replace_nonword $this_word)"
      _set_parser_defaults
    fi

    if [[ " ${current_option_strings[@]} " == *" ${this_word} "* ]]; then
      # a new action should be acquired (due to recognised option string or
      # no more input expected from current action);
      # the next positional action can fill in here
      _set_new_action $this_word false
    fi

    if [[ "$current_action_nargs" != "*" ]] && \
       [[ "$current_action_nargs" != "+" ]] && \
       [[ "$current_action_nargs" != *"..." ]] && \
       (( $word_index + 1 - $current_action_args_start_index >= \
          $current_action_nargs )); then
      $current_action_is_positional && let "completed_positional_actions += 1"
      _set_new_action "pos_${completed_positional_actions}" true
    fi

    let "word_index+=1"
  done

  # Generate the completions

  if [[ "${completing_word}" == -* ]]; then
    # optional argument started: use option strings
    COMPREPLY=( $(compgen -W "${current_option_strings[*]}" -- "${completing_word}") )
  else
    # use choices & compgen
    local IFS=$'\n' # items may contain spaces, so delimit using newline
    COMPREPLY=( $([ -n "${current_action_compgen}" ] \
                  && "${current_action_compgen}" "${completing_word}") )
    unset IFS
    COMPREPLY+=( $(compgen -W "${current_action_choices[*]}" -- "${completing_word}") )
  fi

  return 0
}

complete -o filenames -F _shtab_pre_commit pre-commit
